<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: https | Ross Lawley]]></title>
  <link href="http://rosslawley.co.uk/categories/https/atom.xml" rel="self"/>
  <link href="http://rosslawley.co.uk/"/>
  <updated>2012-11-16T16:29:54+00:00</updated>
  <id>http://rosslawley.co.uk/</id>
  <author>
    <name><![CDATA[Ross Lawley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Django to serve parts of your site over HTTPS]]></title>
    <link href="http://rosslawley.co.uk/2010/08/2010-using-django-to-serve-parts-of-your/"/>
    <updated>2010-08-19T00:00:00+00:00</updated>
    <id>http://rosslawley.co.uk/2010/08/2010-using-django-to-serve-parts-of-your</id>
    <content type="html"><![CDATA[<p>Firstly, you'll need to get your web server up and running with https, you'll needyour certificate and key set up, happily theres already loads of posts about that,so I won't cover it here!</p>


<p>The second area of pain is that djangos development runserver doesn't support HTTPS,which is irksome but apparently there are ways around it! The <a href="http://code.google.com/p/django-weave/wiki/HTTPSDevelopment">django-weave</a> projectgo into detail about it.  I'm lucky in that I run vm's to mimic my production environment, but I often use runserver as well as its just plain handy.</p>


<p>To serve parts of the site as HTTPS I just decorate the views and check the    `is_secure()` flag.  Then I redirect to the secure version!</p>


<p><script src="https://gist.github.com/537450.js?file=secure_required.py"></script></p>


<p>Simple stuff, but part of the problem is the url template tag does local urls,    so once they are on HTTPS how do we ensure that they use HTTP for other parts    of the site? To do this I use a middleware that checks for the flag set on the    request in the decorator:</p>


<p><script src="https://gist.github.com/537457.js?file=secure_required_middleware.py"></script></p>


<p>That ensures that I go back to HTTP versions of pages that should be served by    HTTP.</p>


<p>A final pain is managing mixed content type warnings, which happens when a    web page is served via HTTPS but the assets are served by HTTP, this is bad    as it could undermine the security of the whole page - so dont do it!    You'll need to handle it so you'll have to add checks like:</p>


<div class="CodeRay">
  <div class="code"><pre>http</pre></div>
</div>




<p>Make it easy by writing a template tag to do it and don't forget and js widgets like addthis!</p>


<p>&nbsp;</p>


<div class="blogger-post-footer"><img class="posterous_download_image" src="https://blogger.googleusercontent.com/tracker/7305662280706773984-5991303057497360098?l=www.rosslawley.co.uk" height="1" alt="" width="1" /></div>

]]></content>
  </entry>
  
</feed>
