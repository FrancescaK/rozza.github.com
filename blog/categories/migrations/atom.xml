<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: migrations | Ross Lawley]]></title>
  <link href="http://rozza.github.com/blog/categories/migrations/atom.xml" rel="self"/>
  <link href="http://rozza.github.com/"/>
  <updated>2012-11-16T14:14:23+00:00</updated>
  <id>http://rozza.github.com/</id>
  <author>
    <name><![CDATA[Ross Lawley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resetting South Migrations]]></title>
    <link href="http://rozza.github.com/2010-resetting-south-migrations.html/"/>
    <updated>2010-09-28T00:00:00+00:00</updated>
    <id>http://rozza.github.com/2010-resetting-south-migrations.html</id>
    <content type="html"><![CDATA[<p><a href="http://south.aeracode.org/">South</a> migrations are great but over time, as you write more and more they can become unwieldy and slow. This is exactly what happened at <a href="http://www.streetbook.com/">Streetbook</a>, we love fast iterations and releasing often - the only downside was the number of migrations grew and grew to over a hundred. So we bit the bullet and reset them, it was less traumatic than I initially feared and we got the number of migrations down to just ten.  As I couldn't find an easy step by step guide I thought I'd jot this down for others as a quick guide.</p>


<h2>Reseting migrations</h2>


<p>I found these steps allowed me to reset the migrations quickly and efficiently.  First with a fresh db run the existing migrations.  Then for each app:</p>


<ol>
<li>Export any created data: <br />
<div class="CodeRay">
  <div class="code"><pre>./manage.py dumpdata appname --indent=4 &gt; migration_data/app.json</pre></div>
</div>

</li>
<li>Delete the old migrations </li>
<li>Create the initial migration
<div class="CodeRay">
  <div class="code"><pre>./manage.py schemamigration appname --initial</pre></div>
</div>

</li>
<li>If needed, create a data migration for the app using either:
<ul>
<li>fixtures for large datasets</li>
<li>the south orm</li>
</ul>
</li>
</ol>


<h3>Migration Dependencies</h3>


<p>Once you've created all your new migrations run your test suite - its a great way to test the migration chain and will help you sort out dependencies. If building the database for the test suite fails - read the backtrace and look for the migration that caused the failure and then add the correct <a href="http://south.aeracode.org/docs/dependencies.html">dependencies code</a> - depends_on / needed_by to the failing migrations.</p>


<h3>Circuluar Migrations</h3>


<p>Depending on your database structure you might end up with a migration chain that can't be fulfilled due to a circular dependency. I found that we had a couple of instances of Many To Many database tables being created in the initial migrations and those tables relying on one of the tables being created first. So to fix I removed the M2M migrations into their own migration and this cleared the circular dependency.</p>


<h3>A word about fixtures</h3>


<p>Fixtures can be brilliant and save loads of time, however they bypass the frozen orm and use the schema of the actual model - this can be painful when the model changes in the future. An simple work round I've used in the past has been something like: <a href="http://gist.github.com/623725">abusing fixtures in migrations</a>. That worked until I reset the migrations back to a clean state.</p>


<h2>Pushing Live</h2>


<p>Make sure all the old migrations have been run and you aren't introducing any schema changes with the new migrations - do that before or after you've reset the migrations <em>but not at the same time</em>.</p>


<h3>Reset old migrations:</h3>


<p>Its simple just mark all the migrations as fake:</p>


<div class="CodeRay">
  <div class="code"><pre>./manage.py migrate --all --fake --delete-ghost-migrations</pre></div>
</div>




<p>That <em>should work</em>, but this step failed for me saying one initial was applied before its dependency (even though I was faking them.). However, as I was happy with the migration chain - thanks to my trusty test suite I just killed my migration history like so:</p>


<p>&nbsp;</p>


<div class="CodeRay">
  <div class="code"><pre>from south.models import MigrationHistory
MigrationHistory.objects.all().delete()</pre></div>
</div>




<p>&nbsp;</p>


<p>Then I marked all the migrations as fake:</p>


<div class="CodeRay">
  <div class="code"><pre>./manage.py migrate --all --fake</pre></div>
</div>




<p>All done!</p>

]]></content>
  </entry>
  
</feed>
