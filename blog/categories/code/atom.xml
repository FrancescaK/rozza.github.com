<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Ross Lawley]]></title>
  <link href="http://rozza.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://rozza.github.com/"/>
  <updated>2012-11-16T14:26:36+00:00</updated>
  <id>http://rozza.github.com/</id>
  <author>
    <name><![CDATA[Ross Lawley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx how to; Server Side Include (SSI) debugging]]></title>
    <link href="http://rozza.github.com/2010-nginx-how-to-server-side-include-ssi./"/>
    <updated>2010-01-25T00:00:00+00:00</updated>
    <id>http://rozza.github.com/2010-nginx-how-to-server-side-include-ssi.</id>
    <content type="html"><![CDATA[<p>Server Side Includes (<a href="http://wiki.nginx.org/NginxHttpSsiModule">SSI</a>) are a great feature of <a href="http://wiki.nginx.org/">Nginx</a> allowing you to cache core content of a page but dynamically replace any blocks of the page that are dynamic, for example login links / welcome text.  But they can sometimes hold some gotchas, so heres a post on debugging SSI or debugging Nginx configs in general.</p>


<p>I spent a morning debugging on Nginx when SSI's weren't acting as expected - they were missing! including the stubs and I was losing markup on the page.  When dealing with SSI's here are two key rules:</p>


<ul>
<li>SSI's must be well formed - otherwise funny things happen!</li>
<li>Debugging isn't always easy, but patience is key!</li>
</ul>


<p></p>


<h2>SSI's must be well formed</h2>


<p>Funny things happen when your SSI syntax is malformed!  But finding the cause isn't always easy.</p>


<h2>What's wrong with this snippet?</h2>


<div class="CodeRay">
  <div class="code"><pre>&lt;!--# block name=&quot;default_message&quot; --&gt;  &lt;p&gt;Sorry, this feature is currently unavailable&lt;/p&gt;&lt;!-- endblock --&gt;&lt;!--# include virtual=&quot;/dynamic/footer-links&quot; stub=&quot;default_message&quot; --&gt;</pre></div>
</div>


<p>The results of the above snippet is all content / markup after it is truncated!</p>


<h2>Debugging SSI's</h2>


<p>Firstly, turn off <a href="http://wiki.nginx.org/NginxHttpSsiModule#ssi_silent_errors">Silent Errors</a> in your config like so:<br /></p>


<div class="CodeRay">
  <div class="code"><pre>ssi_silent_errors off;</pre></div>
</div>


<p>You should see in the browser any errors outputted as "[an error occurred while processing the directive]" if there has been an error with the SSI.<p></p><p>If you are using a proxy - check the proxy access logs to ensure that the requests are being made by Nginx!  If they are ensure that they are rendering the expected output.</p><p>Next step is to check what Nginx is doing, turn on debugging and logging of SSI's in your Nginx config:</p><div class="CodeRay">
  <div class="code"><pre>error_log   /var/log/nginx/error.log debug;    log_subrequest  on;</pre></div>
</div></p>

<p>The error log will now start to report all logic steps and actions for requests made to it - they are quite extensive!  You are looking for all SSI includes:</p>


<div class="CodeRay">
  <div class="code"><pre>... [debug] 1545#0: *2 ssi include: &quot;/dynamic/user_status_bar/&quot;</pre></div>
</div>


<p>If your SSI include isn't listed - then check your markup!  It probably is malformed like mine above - I was missing a # from the endblock tag it should have read:</p>


<div class="CodeRay">
  <div class="code"><pre>&lt;!--# block name=&quot;default_message&quot; --&gt;  &lt;p&gt;Sorry, this feature is currently unavailable&lt;/p&gt;&lt;!--# endblock --&gt;&lt;!--# include virtual=&quot;/dynamic/footer-links&quot; stub=&quot;default_message&quot; --&gt;</pre></div>
</div>


<p>That simple typo cost me a morning, so check your markup!  What actually was happening was that Nginx got all the SSI but it couldn't find the endblock and silently errored and discarded the rest of the content.</p>


<div class="blogger-post-footer"><img class="posterous_download_image" src="https://blogger.googleusercontent.com/tracker/7305662280706773984-7842838834265480624?l=www.rosslawley.co.uk" height="1" alt="" width="1" /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx how to; Url cleaning - removing multiple slashes]]></title>
    <link href="http://rozza.github.com/2010-nginx-how-to-url-cleaning-removing/"/>
    <updated>2010-01-10T00:00:00+00:00</updated>
    <id>http://rozza.github.com/2010-nginx-how-to-url-cleaning-removing</id>
    <content type="html"><![CDATA[<p>Carrying on with my short posts on configuring <a href="http://www.nginx.org/">Nginx</a>, heres an easy tip to ensure that all urls are clean, multiple slashes are removed and redirected to the cleaned url eg: <a href="http://example.com//search/">http://example.com//search/</a> and will be redirected to: <a href="http://example.com">http://example.com</a>.</p>


<h2>**<a href="#fixed">Updated Sept 15th</a></h2>


<div class="CodeRay">
  <div class="code"><pre># Remove any multislashes in the url
  # $uri is a cleaned version of the url
  # so we test against the $requested_uri
  set $clean_uri        $uri$is_args$args;
  if ( $clean_uri != $request_uri ) {
    rewrite ^/(.*)      $scheme://$host/$1    permanent;
  }</pre></div>
</div>




<p>This will stop you serving the same content on multiple urls which has SEO implications.  In the past I have written <a href="http://wsgi.org/wsgi/Middleware_and_Utilities">middleware</a> to do the check and redirects, but as the Nginx <a href="http://wiki.nginx.org/NginxHttpProxyModule">Proxy Module</a> uses the cleaned $uri the middleware <em><strong>never sees</strong></em> the multiples slashes and doesn't know without looking at X-Headers that it is serving an invalid url.</p>


<p><em>*</em> Wondering why the redirect doesn't redirect to itself?  The <a href="http://www.regular-expressions.info/">regular expression</a> just captures everything after the first slash!  Well the <a href="http://wiki.nginx.org/NginxHttpRewriteModule#rewrite"> rewrite module</a> also uses the cleaned $uri!</p>


<h3><span style="text-decoration: line-through;">** Update: June 24th</span></h3>


<p>It seems that you can get into a nasty redirect loop, so if your just cleaning double slashes you can use this:</p>


<div class="CodeRay">
  <div class="code"><pre># Remove any multislashes in the url
    if ($request_uri ~* &quot;\/\/&quot;) {
      rewrite ^/(.*)      $scheme://$host/$1    permanent;
    }</pre></div>
</div>




<p>&nbsp;</p>


<h3>** Update: Sept 15th</h3>


<p><a href="http://www.topper.me.uk/" rel="friend">Jon Topper</a> found a bug with the previous fix - <a href="http://www.example.com//">http://www.example.com//</a>?//  would cause a redirect loop.  He posted in the comments a fix and I'm putting here so its easier to read.  Thanks Jon.</p>


<div class="CodeRay">
  <div class="code"><pre># Remove any multislashes in the url
    # Tested against:
    #   http://www.example.com//
    #   http://www.example.com/w//w//w//
    #   http://www.example.com//?//
    set $test_uri $scheme://$host$request_uri;
    if ($test_uri != $scheme://$host$uri$is_args$args) {
        rewrite ^ $scheme://$host$uri$is_args$args? permanent;
    }</pre></div>
</div>




<p>&nbsp;</p>


<div class="blogger-post-footer"><img class="posterous_download_image" src="https://blogger.googleusercontent.com/tracker/7305662280706773984-3020550632646606946?l=www.rosslawley.co.uk" height="1" alt="" width="1" /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx how to; multiple if statements]]></title>
    <link href="http://rozza.github.com/2010-nginx-how-to-multiple-if-statements.h/"/>
    <updated>2010-01-04T00:00:00+00:00</updated>
    <id>http://rozza.github.com/2010-nginx-how-to-multiple-if-statements.h</id>
    <content type="html"><![CDATA[<p>I've been doing a lot of <a href="http://wiki.nginx.org/Main">Nginx</a> configuration tweaking recently, due to some complex requirements for a virtual host I'm writing for a relaunch due later this month.  As I came across a couple of gotchas and problems that required a lot of head scratching, googling and trawling through the <a href="http://forum.nginx.org/">forums</a>, I thought I'd write a series of short posts to try and help any other folk that may have similar Nginx configuration problems in the future.</p>


<h2>Multiple if statements</h2>


<p>As Nginx doesn't allow multiple or nested if statements you can't do something like:</p>


<div class="CodeRay">
  <div class="code"><pre>if ($request_method = POST &amp;&amp; $http_cookie ~* &quot;CCCC=.+(?:;|$)&quot;)</pre></div>
</div>




<p>However, you can set variables and you can do if statements on variables so this can be rewritten:</p>


<div class="CodeRay">
  <div class="code"><pre>if ($request_method = POST) {
    set $test  P;
  }

  if ($http_cookie ~* &quot;CCCC=.+(?:;|$)&quot; ) {
    set $test  &quot;${test}C&quot;;
  }

  if ($test = PC) {
    #rewrite rule goes here.
  }</pre></div>
</div>




<p>As you can use regular expressions on if statements this method allows you to do both &amp;&amp; and | checks.</p>


<p>The example is taken from a hidden away example on the <a href="http://wiki.nginx.org/NginxRewriteMultiCondExample">wiki</a> but as it took me ages to find hopefully it will help you to.</p>


<div class="blogger-post-footer"><img class="posterous_download_image" src="https://blogger.googleusercontent.com/tracker/7305662280706773984-2211604193438918013?l=www.rosslawley.co.uk" height="1" alt="" width="1" /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2010 resolutions and predictions]]></title>
    <link href="http://rozza.github.com/2009-2010-resolutions-and-predictions.html/"/>
    <updated>2009-12-30T00:00:00+00:00</updated>
    <id>http://rozza.github.com/2009-2010-resolutions-and-predictions.html</id>
    <content type="html"><![CDATA[<h2>Resolutions</h2>


<p>Blog and blog often.   I work on some cool and varied technologies and software at <a href="http://thisisglobal.com/">Global Radio</a>.  As I've learnt loads from leading a team of python developers, writing and supporting a CMS and its ecosystem of software for our various radio websites, its high time I shared and reflected on those learnings.</p>


<p>So to kickstart my return to blogging, I've been telling various members of the family about what will be popular in the coming year - so here are my predictions for the coming year...</p>


<p><a name="more"></a><h2>Predictions for 2010</h2><p></p><ul>
<li>The rise of 3D.  Avatar has kick started a 3D revolution and now it will move towards to the mainstream, with 3d TV's sports channels, it will&nbsp;detract&nbsp;and confuse the TV market with HD and HD Ready TV's, Digital Freeview etc.. &nbsp;Looking forward to it - I loved Avatar in 3D.</li>
<li>Tablets rise and netbooks fall.  Netbooks popularity has been amazing but I think 2010 will see the netbooks wain and Tablets will be the gain popularity.</li>
<li>Android the OS of choice.  Android will continue to rise in popularity and will move / merge across to netbooks, tablets and PC's, which swiftly moves to my last prediction;</li>
<li>Chrome OS takes on Ubuntu.  Ubuntu has broken into the mainstream and helped fuel the success of netbooks, now Googles' muscle will push into the market and possibly take some market share from Windows..</li>
</ul><p></p><div class="blogger-post-footer"><img class="posterous_download_image" src="https://blogger.googleusercontent.com/tracker/7305662280706773984-3099944896271931410?l=www.rosslawley.co.uk" height="1" alt="" width="1" /></div></p>
]]></content>
  </entry>
  
</feed>
